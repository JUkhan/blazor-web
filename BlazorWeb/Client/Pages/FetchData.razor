@page "/fetchdata"
@using BlazorWeb.Shared
@inject HttpClient Http

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <table class="table">
    <thead>
        <tr>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@if (orders == null)
{
    <p><em>Oders Loading...</em></p>
}
else
{
    <p>Orders: @orders.Count()</p>
}
<button @onclick="SaveOrder">Save Order</button>
@code {
    private WeatherForecast[]? forecasts;
    private OrderDto[]? orders;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");
        orders = await Http.GetFromJsonAsync<OrderDto[]>("api/order");
        var c = orders?.Count();
    }
    public async Task SaveOrder()
    {
        var order = new OrderDto { Name = "test", State = "new state" };
        var response = await Http.PostAsJsonAsync("api/order", order);
        var order1 = await response.Content.ReadFromJsonAsync<OrderDto>();
        Console.WriteLine(order1.Name);
    }
}
